// Generated by LiveScript 1.3.1
(function(){
  var map, Node, out$ = typeof exports != 'undefined' && exports || this;
  map = require('prelude-ls').map;
  out$.Node = Node = (function(){
    Node.displayName = 'Node';
    var prototype = Node.prototype, constructor = Node;
    function Node(){
      this.connected = [];
      this.origin = void 8;
      this.dist = Infinity;
    }
    prototype.wipeDists = function(){
      var i$, ref$, len$, node, results$ = [];
      if (this.dist !== Infinity) {
        this.dist = Infinity;
        for (i$ = 0, len$ = (ref$ = connected).length; i$ < len$; ++i$) {
          node = ref$[i$];
          results$.push(node.wipeDists());
        }
        return results$;
      }
    };
    prototype.connectTo = function(node, pathWeight){
      this.connected.push({
        node: node,
        weight: pathWeight
      });
      return node.connected.push({
        node: this,
        weight: pathWeight
      });
    };
    prototype.setOrigin = function(){
      this.wipeDists();
      return this.buildDist(0, this);
    };
    prototype.buildDist = function(dd, obj){
      var needsBuild, i$, ref$, len$, ref1$, node, weight, results$ = [];
      this.origin = obj;
      this.dist = dd;
      needsBuild = [];
      for (i$ = 0, len$ = (ref$ = this.connected).length; i$ < len$; ++i$) {
        ref1$ = ref$[i$], node = ref1$.node, weight = ref1$.weight;
        if (node.dist > this.dist + weight) {
          results$.push(node.buildDist(this.dist + weight, obj));
        }
      }
      return results$;
    };
    prototype.shortestPathTo = function(nodes){
      this.setOrigin();
      return map(function(it){
        return it.dist;
      }(nodes));
    };
    return Node;
  }());
}).call(this);
