// Generated by LiveScript 1.3.1
(function(){
  var map, Node, jsonize, ref$, A, B, C, slice$ = [].slice;
  map = require('prelude-ls').map;
  Node = require('./graphs.js').Node;
  jsonize = partialize$.apply(JSON, [
    JSON.stringify, [
      void 8, function(){
        switch (false) {
        case arguments[0] !== 'origin':
          return '...';
        default:
          return arguments[1];
        }
      }
    ], [0]
  ]);
  ref$ = [new Node(), new Node(), new Node()], A = ref$[0], B = ref$[1], C = ref$[2];
  A.connectTo(B, 10);
  B.connectTo(C, 5);
  A.connectTo(C, 12);
  console.log(jsonize([A, B, C]));
  A.shortestPathTo(C);
  console.log(jsonize([A, B, C]));
  function partialize$(f, args, where){
    var context = this;
    return function(){
      var params = slice$.call(arguments), i,
          len = params.length, wlen = where.length,
          ta = args ? args.concat() : [], tw = where ? where.concat() : [];
      for(i = 0; i < len; ++i) { ta[tw[0]] = params[i]; tw.shift(); }
      return len < wlen && len ?
        partialize$.apply(context, [f, ta, tw]) : f.apply(context, ta);
    };
  }
}).call(this);
